filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste("Country:", region, "\n", "Imports:", format(Imports, scientific=T), "\n", "Exports:", Exports))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
us_world_trade(2020)
?format
#this is a function that takes a year (selected by the user) and returns a map of total trade for the US for each country in
#the world that they traded with
us_world_trade = function(year) {
#filter the ustrade dataset to only take the year the user selected
ustrade = ustrade %>%
filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste("Country:", region, "\n", "Imports:", format(Imports, scientific=T, digits=3), "\n", "Exports:", Exports))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
us_world_trade(2020)
#this is a function that takes a year (selected by the user) and returns a map of total trade for the US for each country in
#the world that they traded with
us_world_trade = function(year) {
#filter the ustrade dataset to only take the year the user selected
ustrade = ustrade %>%
filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste("Country:", region, "\n", "Imports:", format(Imports, scientific=T, digits=3), "\n", "Exports:", format(Exports, sceintific=T, digits=3)))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
us_world_trade(2020)
#this is a function that takes a year (selected by the user) and returns a map of total trade for the US for each country in
#the world that they traded with
us_world_trade = function(year) {
#filter the ustrade dataset to only take the year the user selected
ustrade = ustrade %>%
filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste0("Country: ", region, "\n", "Imports: ", format(Imports, scientific=T, digits=3), "\n", "Exports: ", format(Exports, sceintific=T, digits=3)))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
us_world_trade(2020)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
library(maps)
library(DT)
library(bslib)
library(thematic)
library(plotly)
#read in the trade data
ustrade = read.csv("https://github.com/jquam15/436_Final_Project/raw/main/ustrade.csv") %>%
rename("Deficit"="Deficit.Surplus")
#inspect the data
head(ustrade)
#load in the world map with latitude and longitude coordinates from the "maps" package---this allows us to plot the outline of countries
world_map = map_data("world")
#there are several countries where the name of the country doesn't match up across data sources:
# world countries --> trade countries
# Antigua -> Antigua and Barbuda
# Cocos Islands -> Cocos (Keeling) Islands
# Czech Republic -> Czechia
# French Southern and Antarctic Lands -> French South Antarctic Territory
# Grenadines -> Grenada
# Ivory Coast --> Cote d'Ivoire
# Myanmar --> Burma
# Republic of Congo --> Republic of the Congo
# Swaziland --> Eswatini
# Taiwan --> Chinese Taipei
# UK --> United Kingdom
#change these country names in the "world_map" dataset so that they match up with the "ustrade" dataset
world_map$region[world_map$region == "Antigua"] = "Antigua and Barbuda"
world_map$region[world_map$region == "Cocos Islands"] = "Cocos (Keeling) Islands"
world_map$region[world_map$region == "Czech Republic"] = "Czechia"
world_map$region[world_map$region == "French Southern and Antarctic Lands"] = "French South Antarctic Territory"
world_map$region[world_map$region == "Grenadines"] = "Grenada"
world_map$region[world_map$region == "Ivory Coast"] = "Cote d'Ivoire"
world_map$region[world_map$region == "Myanmar"] = "Burma"
world_map$region[world_map$region == "Republic of Congo"] = "Republic of the Congo"
world_map$region[world_map$region == "Swaziland"] = "Eswatini"
world_map$region[world_map$region == "Taiwan"] = "Chinese Taipei"
world_map$region[world_map$region == "UK"] = "United Kingdom"
# #This is the code to identify mismtaches in how the two datsets named countries
# filtered_us = ustrade %>%
#   filter(Year == 2020)
#
# test = world_map %>%
#     #merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
#     merge(filtered_us, by.x = "region", by.y = "Country", all.x = T) %>%
#     #arrange the data accordingly
#     arrange(group, order) %>%
#     select(-subregion)
#
# #take only cases where they didn't match up
# mismatch = test[!complete.cases(test), ]
# #get list of countries that are in the world map BUT ARE NOT IN THE USTRADE data
# world_countries = unique(mismatch$region)
# #get list of ALL countries in the US trade data
# trade_countries = unique(ustrade$Country)
# #sort in alphabetical order
# sort(world_countries)
# #sort in alphabetical order
# sort(trade_countries)
#some countries the US doesn't trade with---this accounts for the remaining countries in world_countries that are not changed above
#this is a function that takes a year (selected by the user) and returns a map of total trade for the US for each country in
#the world that they traded with
us_world_trade = function(year) {
#filter the ustrade dataset to only take the year the user selected
ustrade = ustrade %>%
filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste0("Country: ", region, "\n", "Imports: ", format(Imports, scientific=T, digits=3), "\n", "Exports: ", format(Exports, sceintific=T, digits=3)))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
us_world_trade(2020)
#get a list of continents
years = unique(ustrade$Year)
#get descriptive text
descriptive_text_worldmap = "This visual allows you to select a year and then displays a heatmap of the world with the total trade (Imports + Exports) that the US did with each country. The data is scaled by taking the common logarithm of total trade, so that there is more of a distinction between countries. The purpose of this plot is to give a general idea of who the US is trading the most with for a certain year. Darker shades of red mean more trade while lighter shades of red mean less trade. Countries that are shaded with black either did not trade with the US, are a US territory, or are a territory of another country and therefore their trade is accounted for already. In earlier years, some countries are also shaded black because they did not exist for that year (Ex: South Sudan). Additionally if you'd like more information you can hover over a country and see the country's name and common logarithm of total trade. You also can Here are some helpful benchmarks for understanding the values for the common logarithm of total trade in dollars: 6 = million, 7 = ten million, 8 = hundred million, 9 = billion, and so on. You can zoom in on the plot by clicking and holding to create a box brush."
ui = fluidPage(
theme = bs_theme(
bootswatch = "darkly",
base_font = font_google("PT Serif")
),
#carry the theme (font style) throughout the table and plots
thematic_shiny(font="auto"),
#set a title for the visualization
titlePanel("Analyzing US Trade from 1995 to 2020"),
#set up the main panel and side panel for the heatmap
sidebarLayout(
#the side panel will hold the box to select a year and the descriptive text
sidebarPanel(
#grabs the user input from a list of years (default is 2020)
selectInput("year", "Select a Year: ", years, selected=2020, multiple=F),
#this element is the descriptive text for the plot
textOutput("descriptive_text_worldmap")
),
#set up the main panel
mainPanel(
#plot output for the world heat map and make the plot taller so it isn't super stretched
plotlyOutput("worldmap", height=600)
)
),
#output a data table that is sorted in descending order by Total Trade
dataTableOutput("table")
)
server = function(input, output) {
#render the world map
output$worldmap = renderPlotly({
#call the helper function to generate the plot with the user input specifying the year
us_world_trade(input$year)
})
#this renders a datatable sorted by the top trade partners by Imports + Exports in descending order (pair with world map)
output$table = renderDataTable({
ustrade %>%
filter(Year == input$year) %>%
mutate(TotalTrade = Imports + Exports) %>%
arrange(-TotalTrade)
})
#this outputs the descriptive text for the side panel for the world map
output$descriptive_text_worldmap = renderText({
descriptive_text_worldmap
})
}
shinyApp(ui, server)
#this is a function that takes a year (selected by the user) and returns a map of total trade for the US for each country in
#the world that they traded with
us_world_trade = function(year) {
#filter the ustrade dataset to only take the year the user selected
ustrade = ustrade %>%
filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste0("Country: ", region, "\n", "Imports: ", format(Imports, scientific=T, digits=3), "\n", "Exports: ", format(Exports, sceintific=T, digits=3)))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
#us_world_trade(2020)
#load in the world map with latitude and longitude coordinates from the "maps" package---this allows us to plot the outline of countries
world_map = map_data("world")
#there are several countries where the name of the country doesn't match up across data sources:
# world countries --> trade countries
# Antigua -> Antigua and Barbuda
# Cocos Islands -> Cocos (Keeling) Islands
# Czech Republic -> Czechia
# French Southern and Antarctic Lands -> French South Antarctic Territory
# Grenadines -> Grenada
# Ivory Coast --> Cote d'Ivoire
# Myanmar --> Burma
# Republic of Congo --> Republic of the Congo
# Swaziland --> Eswatini
# Taiwan --> Chinese Taipei
# UK --> United Kingdom
#change these country names in the "world_map" dataset so that they match up with the "ustrade" dataset
world_map$region[world_map$region == "Antigua"] = "Antigua and Barbuda"
world_map$region[world_map$region == "Cocos Islands"] = "Cocos (Keeling) Islands"
world_map$region[world_map$region == "Czech Republic"] = "Czechia"
world_map$region[world_map$region == "French Southern and Antarctic Lands"] = "French South Antarctic Territory"
world_map$region[world_map$region == "Grenadines"] = "Grenada"
world_map$region[world_map$region == "Ivory Coast"] = "Cote d'Ivoire"
world_map$region[world_map$region == "Myanmar"] = "Burma"
world_map$region[world_map$region == "Republic of Congo"] = "Republic of the Congo"
world_map$region[world_map$region == "Swaziland"] = "Eswatini"
world_map$region[world_map$region == "Taiwan"] = "Chinese Taipei"
world_map$region[world_map$region == "UK"] = "United Kingdom"
#This is the code to identify mismtaches in how the two datsets named countries
filtered_us = ustrade %>%
filter(Year == 2020)
test = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(filtered_us, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order) %>%
select(-subregion)
#take only cases where they didn't match up
mismatch = test[!complete.cases(test), ]
#get list of countries that are in the world map BUT ARE NOT IN THE USTRADE data
world_countries = unique(mismatch$region)
#get list of ALL countries in the US trade data
trade_countries = unique(ustrade$Country)
# #sort in alphabetical order
# sort(world_countries)
# #sort in alphabetical order
# sort(trade_countries)
#some countries the US doesn't trade with---this accounts for the remaining countries in world_countries that are not changed above
sort(world_countries)
sort(trade_countries)
knitr::opts_chunk$set(echo = TRUE)
library(shiny)
library(tidyverse)
library(maps)
library(DT)
library(bslib)
library(thematic)
library(plotly)
#read in the trade data
ustrade = read.csv("https://github.com/jquam15/436_Final_Project/raw/main/ustrade.csv") %>%
rename("Deficit"="Deficit.Surplus")
#inspect the data
head(ustrade)
#load in the world map with latitude and longitude coordinates from the "maps" package---this allows us to plot the outline of countries
world_map = map_data("world")
#there are several countries where the name of the country doesn't match up across data sources:
# world countries --> trade countries
# Antigua -> Antigua and Barbuda
# Cocos Islands -> Cocos (Keeling) Islands
# Czech Republic -> Czechia
# French Southern and Antarctic Lands -> French South Antarctic Territory
# Grenadines -> Grenada
# Ivory Coast --> Cote d'Ivoire
# Myanmar --> Burma
# Republic of Congo --> Republic of the Congo
# Swaziland --> Eswatini
# Taiwan --> Chinese Taipei
# UK --> United Kingdom
#change these country names in the "world_map" dataset so that they match up with the "ustrade" dataset
world_map$region[world_map$region == "Antigua"] = "Antigua and Barbuda"
world_map$region[world_map$region == "Cocos Islands"] = "Cocos (Keeling) Islands"
world_map$region[world_map$region == "Czech Republic"] = "Czechia"
world_map$region[world_map$region == "French Southern and Antarctic Lands"] = "French South Antarctic Territory"
world_map$region[world_map$region == "Grenadines"] = "Grenada"
world_map$region[world_map$region == "Ivory Coast"] = "Cote d'Ivoire"
world_map$region[world_map$region == "Myanmar"] = "Burma"
world_map$region[world_map$region == "Republic of Congo"] = "Republic of the Congo"
world_map$region[world_map$region == "Swaziland"] = "Eswatini"
world_map$region[world_map$region == "Taiwan"] = "Chinese Taipei"
world_map$region[world_map$region == "UK"] = "United Kingdom"
#This is the code to identify mismtaches in how the two datsets named countries
filtered_us = ustrade %>%
filter(Year == 2020)
test = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(filtered_us, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order) %>%
select(-subregion)
#take only cases where they didn't match up
mismatch = test[!complete.cases(test), ]
#get list of countries that are in the world map BUT ARE NOT IN THE USTRADE data
world_countries = unique(mismatch$region)
#get list of ALL countries in the US trade data
trade_countries = unique(ustrade$Country)
# #sort in alphabetical order
# sort(world_countries)
# #sort in alphabetical order
# sort(trade_countries)
#some countries the US doesn't trade with---this accounts for the remaining countries in world_countries that are not changed above
#this is a function that takes a year (selected by the user) and returns a map of total trade for the US for each country in
#the world that they traded with
us_world_trade = function(year) {
#filter the ustrade dataset to only take the year the user selected
ustrade = ustrade %>%
filter(Year == year) %>%
#create a new column called TotalTrade that is the sum of imports and exports
mutate(TotalTrade = log10(Imports + Exports))
#merge this world map with our trade data so that we can fill countries by how much total trade they have
plotting_df = world_map %>%
#merge the two datasets by their appropriate column name---take all rows in the world map dataset (left join) as we need all of them to make the world map (even if the US didn't trade with that country we still need that country to create the map)
merge(ustrade, by.x = "region", by.y = "Country", all.x = T) %>%
#arrange the data accordingly
arrange(group, order)
#make the plot with the countries filled in by how much they traded
p = ggplot(plotting_df, aes(x = long, y = lat, group = group, fill = TotalTrade)) +  #take a logarithmic scale so we can differentiate between countries
geom_polygon(aes(text = paste0("Country: ", region, "\n", "Imports: ", format(Imports, scientific=T, digits=3), "\n", "Exports: ", format(Exports, sceintific=T, digits=3)))) + #plot the polygons with tooltip
#fill colors from light red to dark red
scale_fill_gradient(low="#ffcccb", high="#8b0000", na.value = "#000000") +
#remove grid lines and axis labels (lat and long) as they aren't important to the plot
theme(
panel.grid = element_blank(),
axis.title = element_blank(),
axis.ticks = element_blank(),
axis.text = element_blank(),
title = element_text(size=18),
legend.text = element_text(size=12),
legend.title = element_text(size=12)
) +
#change the title to the legend
labs(title=paste0("Heatmap of US Total Trade by Country for ", year), fill = "Total Trade")
#want the plot to have tooltips so use plotly package to create the plot
ggplotly(p)
}
#us_world_trade(2020)
#get a list of continents
years = unique(ustrade$Year)
#get descriptive text
descriptive_text_worldmap = "This visual allows you to select a year and then displays a heatmap of the world with the total trade (Imports + Exports) that the US did with each country. The data is scaled by taking the common logarithm of total trade, so that there is more of a distinction between countries. The purpose of this plot is to give a general idea of who the US is trading the most with for a certain year. Darker shades of red mean more trade while lighter shades of red mean less trade. Countries that are shaded with black either did not trade with the US, are a US territory, or are a territory of another country and therefore their trade is accounted for already. In earlier years, some countries are also shaded black because they did not exist for that year (Ex: South Sudan). Additionally if you'd like more information you can hover over a country and see the country's name and common logarithm of total trade. You also can Here are some helpful benchmarks for understanding the values for the common logarithm of total trade in dollars: 6 = million, 7 = ten million, 8 = hundred million, 9 = billion, and so on. You can zoom in on the plot by clicking and holding to create a box brush."
ui = fluidPage(
theme = bs_theme(
bootswatch = "darkly",
base_font = font_google("PT Serif")
),
#carry the theme (font style) throughout the table and plots
thematic_shiny(font="auto"),
#set a title for the visualization
titlePanel("Analyzing US Trade from 1995 to 2020"),
#set up the main panel and side panel for the heatmap
sidebarLayout(
#the side panel will hold the box to select a year and the descriptive text
sidebarPanel(
#grabs the user input from a list of years (default is 2020)
selectInput("year", "Select a Year: ", years, selected=2020, multiple=F),
#this element is the descriptive text for the plot
textOutput("descriptive_text_worldmap")
),
#set up the main panel
mainPanel(
#plot output for the world heat map and make the plot taller so it isn't super stretched
plotlyOutput("worldmap", height=600)
)
),
#output a data table that is sorted in descending order by Total Trade
dataTableOutput("table")
)
server = function(input, output) {
#render the world map
output$worldmap = renderPlotly({
#call the helper function to generate the plot with the user input specifying the year
us_world_trade(input$year)
})
#this renders a datatable sorted by the top trade partners by Imports + Exports in descending order (pair with world map)
output$table = renderDataTable({
ustrade %>%
filter(Year == input$year) %>%
mutate(TotalTrade = Imports + Exports) %>%
arrange(-TotalTrade)
})
#this outputs the descriptive text for the side panel for the world map
output$descriptive_text_worldmap = renderText({
descriptive_text_worldmap
})
}
shinyApp(ui, server)
