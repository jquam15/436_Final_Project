k_per_9_diff = K9_rp_pred - k_per_9_rp,
walks_per_9_diff = BB9_rp_pred - walks_per_9_rp,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else {
return("Input a proper value for player_type to the function. Options are batter, starter, or reliever")
}
return(modeling_df)
}
batter_investments = find_investment_value("batter")
batter_investments %>%
filter(ovr %in% c(77,78,79,83,84))
sp_investments = find_investment_value("starter")
sp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
rp_investments = find_investment_value("reliever")
rp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(sp_investments, "Freddy Peralta")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Austin Hays")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Matt Olson")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(sp_investments, "Jesus Luzardo")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(sp_investments, "Zach Eflin")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(sp_investments, "Reid Detmers")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Cal Raleigh")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
date = "2023-04-22"
#have to change filename if you wan't data from a different date
filepath = file.path("show_data", paste0("show_data_", date ,".csv"))
#read data
mlbts = read.csv(filepath) %>%
#only want the live series (this is the series for investments)
filter(series == "Live") %>%
#rename columns that don't have clear names
rename(c("position" = "display_position", "secondary"="display_secondary_positions", "hits_per_9" = "hits_per_bf",
"k_per_9" = "k_per_bf", "walks_per_9" = "bb_per_bf")) %>%
#drop series since we filtered it to only be live series
select(-series)
#head(mlbts)
#split by hitters and pitchers
hitters = mlbts %>%
filter(is_hitter == "True") %>%
#don't need columns with pitching stats
select(-c("hits_per_9", "k_per_9", "walks_per_9", "is_hitter"))
#head(hitters)
pitchers = mlbts %>%
filter(is_hitter == "False") %>%
#don't need columns with hitting stats
select(-c("is_hitter", "contact_left", "contact_right", "power_left", "power_right"))
#head(pitchers)
hitting_stats = read.csv(file.path("hitting_stats", paste0("merged_hitting_", date, ".csv"))) %>%
#rename column to match up with mlbts hitting dataset for merging purpose
rename("name"="Name")
#head(hitting_stats)
pitching_stats = read.csv(file.path("pitching_stats", paste0("final_pitching_", date, ".csv"))) %>%
#rename column to match up with mlbts pitching dataset for merging purpose
rename("name"="Name")
#head(pitching_stats)
#merge the hitting datasets on player name
merged_hitting = merge(hitters, hitting_stats, by="name")
#head(merged_hitting)
#merge the pitching datasets on player name
merged_pitching = merge(pitchers, pitching_stats, by="name") %>%
#rename columns
rename(c("K9"="K.9", "H9"="H.9", "BB9"="BB.9"))
#stats are calculated differently for relief pitchers and starting pitchers so separate them
merged_rp = merged_pitching %>%
filter(position == "RP" | position == "CP") %>%
rename(c("hits_per_9_rp"="hits_per_9", "k_per_9_rp"="k_per_9", "walks_per_9_rp"="walks_per_9", "K9_rp"="K9", "BB9_rp"="BB9", "H9_rp"="H9"))
#head(merged_rp)
merged_sp = merged_pitching %>%
filter(position == "SP")
#head(merged_sp)
#remove unneeded dataframes from r environment
rm(hitters, hitting_stats, merged_pitching, mlbts, pitchers, pitching_stats)
#read in and inspect the data
coef_df = read_csv("coefficients.csv")
coef_df
#this function adds predicted values to a df based on the coefficients with respect to certain player types and stats
add_predictions = function(player_type, df) {
#loop through the names of stats in the coef_df associated with a certain player type
for (stat in coef_df[coef_df$player_kind == player_type, ]$stat) {
#get the new column name by adding _pred to the end of the stat
new_col_name = paste0(stat, "_pred")
#get the appropriate slope
slope = as.numeric(coef_df[coef_df$stat == stat, "slope"])
#get the appropriate intercept
intercept = as.numeric(coef_df[coef_df$stat == stat, "intercept"])
#get the linear regression predictions and round them to 2 decimal points
preds = round(intercept + df[[stat]] * slope, 2)
#the max rating in mlb the show is a 125 so if the predicted value is greater we will cap it at 125 (helps prevent outliers)
for (i in 1:length(preds)) {
if (preds[i] > 125) {
preds[i] = 125
} else if (preds[i] < 10) {
preds[i] = 10
}
}
#add the new column full of predictions
df[[new_col_name]] = preds
}
#return the new df with the predicted columns
return(df)
}
#this function determines the difference between a player's predicted rating and their actual rating in attributes that are updated
#throughout the year in MLB the Show to find who deserves an upgrade (helpful for investments)
find_investment_value = function(player_type) {
#figure out which dataset to use for the function call as well as which columns to subtract depending on the player_type
if (player_type == "batter") {
modeling_df = add_predictions(player_type, merged_hitting) %>%
mutate(
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
contact_left_diff = AVG_left_pred - contact_left,
contact_right_diff = AVG_right_pred - contact_right,
power_left_diff = ISO_left_pred - power_left,
power_right_diff = ISO_right_pred - power_right,
total_attribute_difference = contact_left_diff + contact_right_diff + power_left_diff + power_right_diff
) %>%
select(name, team, rarity, ovr, contact_left_diff, contact_right_diff, power_left_diff, power_right_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else if (player_type == "starter") {
modeling_df = add_predictions(player_type, merged_sp) %>%
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
mutate(
hits_per_9_diff = H9_pred - hits_per_9,
k_per_9_diff = K9_pred - k_per_9,
walks_per_9_diff = BB9_pred - walks_per_9,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else if (player_type == "reliever") {
modeling_df = add_predictions(player_type, merged_rp) %>%
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
mutate(
hits_per_9_diff = H9_rp_pred - hits_per_9_rp,
k_per_9_diff = K9_rp_pred - k_per_9_rp,
walks_per_9_diff = BB9_rp_pred - walks_per_9_rp,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else {
return("Input a proper value for player_type to the function. Options are batter, starter, or reliever")
}
return(modeling_df)
}
batter_investments = find_investment_value("batter")
batter_investments %>%
filter(ovr %in% c(77,78,79,83,84))
sp_investments = find_investment_value("starter")
sp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
rp_investments = find_investment_value("reliever")
rp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Cal Raleigh")
View(merged_hitting)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
date = "2023-04-25"
#have to change filename if you wan't data from a different date
filepath = file.path("show_data", paste0("show_data_", date ,".csv"))
#read data
mlbts = read.csv(filepath) %>%
#only want the live series (this is the series for investments)
filter(series == "Live") %>%
#rename columns that don't have clear names
rename(c("position" = "display_position", "secondary"="display_secondary_positions", "hits_per_9" = "hits_per_bf",
"k_per_9" = "k_per_bf", "walks_per_9" = "bb_per_bf")) %>%
#drop series since we filtered it to only be live series
select(-series)
#head(mlbts)
#split by hitters and pitchers
hitters = mlbts %>%
filter(is_hitter == "True") %>%
#don't need columns with pitching stats
select(-c("hits_per_9", "k_per_9", "walks_per_9", "is_hitter"))
#head(hitters)
pitchers = mlbts %>%
filter(is_hitter == "False") %>%
#don't need columns with hitting stats
select(-c("is_hitter", "contact_left", "contact_right", "power_left", "power_right"))
#head(pitchers)
hitting_stats = read.csv(file.path("hitting_stats", paste0("merged_hitting_", date, ".csv"))) %>%
#rename column to match up with mlbts hitting dataset for merging purpose
rename("name"="Name")
#head(hitting_stats)
pitching_stats = read.csv(file.path("pitching_stats", paste0("final_pitching_", date, ".csv"))) %>%
#rename column to match up with mlbts pitching dataset for merging purpose
rename("name"="Name")
#head(pitching_stats)
#merge the hitting datasets on player name
merged_hitting = merge(hitters, hitting_stats, by="name")
#head(merged_hitting)
#merge the pitching datasets on player name
merged_pitching = merge(pitchers, pitching_stats, by="name") %>%
#rename columns
rename(c("K9"="K.9", "H9"="H.9", "BB9"="BB.9"))
#stats are calculated differently for relief pitchers and starting pitchers so separate them
merged_rp = merged_pitching %>%
filter(position == "RP" | position == "CP") %>%
rename(c("hits_per_9_rp"="hits_per_9", "k_per_9_rp"="k_per_9", "walks_per_9_rp"="walks_per_9", "K9_rp"="K9", "BB9_rp"="BB9", "H9_rp"="H9"))
#head(merged_rp)
merged_sp = merged_pitching %>%
filter(position == "SP")
#head(merged_sp)
#remove unneeded dataframes from r environment
rm(hitters, hitting_stats, merged_pitching, mlbts, pitchers, pitching_stats)
#read in and inspect the data
coef_df = read_csv("coefficients.csv")
coef_df
#this function adds predicted values to a df based on the coefficients with respect to certain player types and stats
add_predictions = function(player_type, df) {
#loop through the names of stats in the coef_df associated with a certain player type
for (stat in coef_df[coef_df$player_kind == player_type, ]$stat) {
#get the new column name by adding _pred to the end of the stat
new_col_name = paste0(stat, "_pred")
#get the appropriate slope
slope = as.numeric(coef_df[coef_df$stat == stat, "slope"])
#get the appropriate intercept
intercept = as.numeric(coef_df[coef_df$stat == stat, "intercept"])
#get the linear regression predictions and round them to 2 decimal points
preds = round(intercept + df[[stat]] * slope, 2)
#the max rating in mlb the show is a 125 so if the predicted value is greater we will cap it at 125 (helps prevent outliers)
for (i in 1:length(preds)) {
if (preds[i] > 125) {
preds[i] = 125
} else if (preds[i] < 10) {
preds[i] = 10
}
}
#add the new column full of predictions
df[[new_col_name]] = preds
}
#return the new df with the predicted columns
return(df)
}
#this function determines the difference between a player's predicted rating and their actual rating in attributes that are updated
#throughout the year in MLB the Show to find who deserves an upgrade (helpful for investments)
find_investment_value = function(player_type) {
#figure out which dataset to use for the function call as well as which columns to subtract depending on the player_type
if (player_type == "batter") {
modeling_df = add_predictions(player_type, merged_hitting) %>%
mutate(
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
contact_left_diff = AVG_left_pred - contact_left,
contact_right_diff = AVG_right_pred - contact_right,
power_left_diff = ISO_left_pred - power_left,
power_right_diff = ISO_right_pred - power_right,
total_attribute_difference = contact_left_diff + contact_right_diff + power_left_diff + power_right_diff
) %>%
select(name, team, rarity, ovr, contact_left_diff, contact_right_diff, power_left_diff, power_right_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else if (player_type == "starter") {
modeling_df = add_predictions(player_type, merged_sp) %>%
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
mutate(
hits_per_9_diff = H9_pred - hits_per_9,
k_per_9_diff = K9_pred - k_per_9,
walks_per_9_diff = BB9_pred - walks_per_9,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else if (player_type == "reliever") {
modeling_df = add_predictions(player_type, merged_rp) %>%
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
mutate(
hits_per_9_diff = H9_rp_pred - hits_per_9_rp,
k_per_9_diff = K9_rp_pred - k_per_9_rp,
walks_per_9_diff = BB9_rp_pred - walks_per_9_rp,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else {
return("Input a proper value for player_type to the function. Options are batter, starter, or reliever")
}
return(modeling_df)
}
batter_investments = find_investment_value("batter")
batter_investments %>%
filter(ovr %in% c(77,78,79,83,84))
sp_investments = find_investment_value("starter")
sp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
rp_investments = find_investment_value("reliever")
rp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Cal Raleigh")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Jonah Heim")
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
date = "2023-04-28"
#have to change filename if you wan't data from a different date
filepath = file.path("show_data", paste0("show_data_", date ,".csv"))
#read data
mlbts = read.csv(filepath) %>%
#only want the live series (this is the series for investments)
filter(series == "Live") %>%
#rename columns that don't have clear names
rename(c("position" = "display_position", "secondary"="display_secondary_positions", "hits_per_9" = "hits_per_bf",
"k_per_9" = "k_per_bf", "walks_per_9" = "bb_per_bf")) %>%
#drop series since we filtered it to only be live series
select(-series)
#head(mlbts)
#split by hitters and pitchers
hitters = mlbts %>%
filter(is_hitter == "True") %>%
#don't need columns with pitching stats
select(-c("hits_per_9", "k_per_9", "walks_per_9", "is_hitter"))
#head(hitters)
pitchers = mlbts %>%
filter(is_hitter == "False") %>%
#don't need columns with hitting stats
select(-c("is_hitter", "contact_left", "contact_right", "power_left", "power_right"))
#head(pitchers)
hitting_stats = read.csv(file.path("hitting_stats", paste0("merged_hitting_", date, ".csv"))) %>%
#rename column to match up with mlbts hitting dataset for merging purpose
rename("name"="Name")
#head(hitting_stats)
pitching_stats = read.csv(file.path("pitching_stats", paste0("final_pitching_", date, ".csv"))) %>%
#rename column to match up with mlbts pitching dataset for merging purpose
rename("name"="Name")
#head(pitching_stats)
#merge the hitting datasets on player name
merged_hitting = merge(hitters, hitting_stats, by="name")
#head(merged_hitting)
#merge the pitching datasets on player name
merged_pitching = merge(pitchers, pitching_stats, by="name") %>%
#rename columns
rename(c("K9"="K.9", "H9"="H.9", "BB9"="BB.9"))
#stats are calculated differently for relief pitchers and starting pitchers so separate them
merged_rp = merged_pitching %>%
filter(position == "RP" | position == "CP") %>%
rename(c("hits_per_9_rp"="hits_per_9", "k_per_9_rp"="k_per_9", "walks_per_9_rp"="walks_per_9", "K9_rp"="K9", "BB9_rp"="BB9", "H9_rp"="H9"))
#head(merged_rp)
merged_sp = merged_pitching %>%
filter(position == "SP")
#head(merged_sp)
#remove unneeded dataframes from r environment
rm(hitters, hitting_stats, merged_pitching, mlbts, pitchers, pitching_stats)
#read in and inspect the data
coef_df = read_csv("coefficients.csv")
coef_df
#this function adds predicted values to a df based on the coefficients with respect to certain player types and stats
add_predictions = function(player_type, df) {
#loop through the names of stats in the coef_df associated with a certain player type
for (stat in coef_df[coef_df$player_kind == player_type, ]$stat) {
#get the new column name by adding _pred to the end of the stat
new_col_name = paste0(stat, "_pred")
#get the appropriate slope
slope = as.numeric(coef_df[coef_df$stat == stat, "slope"])
#get the appropriate intercept
intercept = as.numeric(coef_df[coef_df$stat == stat, "intercept"])
#get the linear regression predictions and round them to 2 decimal points
preds = round(intercept + df[[stat]] * slope, 2)
#the max rating in mlb the show is a 125 so if the predicted value is greater we will cap it at 125 (helps prevent outliers)
for (i in 1:length(preds)) {
if (preds[i] > 125) {
preds[i] = 125
} else if (preds[i] < 10) {
preds[i] = 10
}
}
#add the new column full of predictions
df[[new_col_name]] = preds
}
#return the new df with the predicted columns
return(df)
}
#this function determines the difference between a player's predicted rating and their actual rating in attributes that are updated
#throughout the year in MLB the Show to find who deserves an upgrade (helpful for investments)
find_investment_value = function(player_type) {
#figure out which dataset to use for the function call as well as which columns to subtract depending on the player_type
if (player_type == "batter") {
modeling_df = add_predictions(player_type, merged_hitting) %>%
mutate(
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
contact_left_diff = AVG_left_pred - contact_left,
contact_right_diff = AVG_right_pred - contact_right,
power_left_diff = ISO_left_pred - power_left,
power_right_diff = ISO_right_pred - power_right,
total_attribute_difference = contact_left_diff + contact_right_diff + power_left_diff + power_right_diff
) %>%
select(name, team, rarity, ovr, contact_left_diff, contact_right_diff, power_left_diff, power_right_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else if (player_type == "starter") {
modeling_df = add_predictions(player_type, merged_sp) %>%
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
mutate(
hits_per_9_diff = H9_pred - hits_per_9,
k_per_9_diff = K9_pred - k_per_9,
walks_per_9_diff = BB9_pred - walks_per_9,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else if (player_type == "reliever") {
modeling_df = add_predictions(player_type, merged_rp) %>%
#these are all predicted - actual (positive values mean they should be rated higher (underrated) while negative values mean the opposite)
mutate(
hits_per_9_diff = H9_rp_pred - hits_per_9_rp,
k_per_9_diff = K9_rp_pred - k_per_9_rp,
walks_per_9_diff = BB9_rp_pred - walks_per_9_rp,
total_attribute_difference = hits_per_9_diff + k_per_9_diff + walks_per_9_diff
) %>%
select(name, team, rarity, ovr, hits_per_9_diff, k_per_9_diff, walks_per_9_diff, total_attribute_difference) %>%
#filter(total_attribute_difference > 5) %>%
arrange(desc(total_attribute_difference))
} else {
return("Input a proper value for player_type to the function. Options are batter, starter, or reliever")
}
return(modeling_df)
}
batter_investments = find_investment_value("batter")
batter_investments %>%
filter(ovr %in% c(77,78,79,83,84))
sp_investments = find_investment_value("starter")
sp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
rp_investments = find_investment_value("reliever")
rp_investments %>%
filter(ovr %in% c(77,78,79,83,84))
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Jonah Heim")
#this function takes one of 3 dataframes (either batter_investments, rp_investments, or sp_investments) as well as a player name
#and returns the player information
analyze_player = function(df, player_name) {
df %>%
filter(name == player_name)
}
analyze_player(batter_investments, "Jonah Heim")
setwd("~/stats_classes/stat436/projects/436_Final_Project")
